import math


class Reward:
    def __init__(self, verbose=False):
        self.first_racingpoint_index = None
        self.verbose = verbose

    def reward_function(self, params):

        # Import package (needed for heading)
        import math

        ################## HELPER FUNCTIONS ###################

        def dist_2_points(x1, x2, y1, y2):
            return abs(abs(x1-x2)**2 + abs(y1-y2)**2)**0.5

        def closest_2_racing_points_index(racing_coords, car_coords):

            # Calculate all distances to racing points
            distances = []
            for i in range(len(racing_coords)):
                distance = dist_2_points(x1=racing_coords[i][0], x2=car_coords[0],
                                         y1=racing_coords[i][1], y2=car_coords[1])
                distances.append(distance)

            # Get index of the closest racing point
            closest_index = distances.index(min(distances))

            # Get index of the second closest racing point
            distances_no_closest = distances.copy()
            distances_no_closest[closest_index] = 999
            second_closest_index = distances_no_closest.index(
                min(distances_no_closest))

            return [closest_index, second_closest_index]

        def dist_to_racing_line(closest_coords, second_closest_coords, car_coords):
            
            # Calculate the distances between 2 closest racing points
            a = abs(dist_2_points(x1=closest_coords[0],
                                  x2=second_closest_coords[0],
                                  y1=closest_coords[1],
                                  y2=second_closest_coords[1]))

            # Distances between car and closest and second closest racing point
            b = abs(dist_2_points(x1=car_coords[0],
                                  x2=closest_coords[0],
                                  y1=car_coords[1],
                                  y2=closest_coords[1]))
            c = abs(dist_2_points(x1=car_coords[0],
                                  x2=second_closest_coords[0],
                                  y1=car_coords[1],
                                  y2=second_closest_coords[1]))

            # Calculate distance between car and racing line (goes through 2 closest racing points)
            # try-except in case a=0 (rare bug in DeepRacer)
            try:
                distance = abs(-(a**4) + 2*(a**2)*(b**2) + 2*(a**2)*(c**2) -
                               (b**4) + 2*(b**2)*(c**2) - (c**4))**0.5 / (2*a)
            except:
                distance = b

            return distance

        # Calculate which one of the closest racing points is the next one and which one the previous one
        def next_prev_racing_point(closest_coords, second_closest_coords, car_coords, heading):

            # Virtually set the car more into the heading direction
            heading_vector = [math.cos(math.radians(
                heading)), math.sin(math.radians(heading))]
            new_car_coords = [car_coords[0]+heading_vector[0],
                              car_coords[1]+heading_vector[1]]

            # Calculate distance from new car coords to 2 closest racing points
            distance_closest_coords_new = dist_2_points(x1=new_car_coords[0],
                                                        x2=closest_coords[0],
                                                        y1=new_car_coords[1],
                                                        y2=closest_coords[1])
            distance_second_closest_coords_new = dist_2_points(x1=new_car_coords[0],
                                                               x2=second_closest_coords[0],
                                                               y1=new_car_coords[1],
                                                               y2=second_closest_coords[1])

            if distance_closest_coords_new <= distance_second_closest_coords_new:
                next_point_coords = closest_coords
                prev_point_coords = second_closest_coords
            else:
                next_point_coords = second_closest_coords
                prev_point_coords = closest_coords

            return [next_point_coords, prev_point_coords]

        def racing_direction_diff(closest_coords, second_closest_coords, car_coords, heading):

            # Calculate the direction of the center line based on the closest waypoints
            next_point, prev_point = next_prev_racing_point(closest_coords,
                                                            second_closest_coords,
                                                            car_coords,
                                                            heading)

            # Calculate the direction in radius, arctan2(dy, dx), the result is (-pi, pi) in radians
            track_direction = math.atan2(
                next_point[1] - prev_point[1], next_point[0] - prev_point[0])

            # Convert to degree
            track_direction = math.degrees(track_direction)

            # Calculate the difference between the track direction and the heading direction of the car
            direction_diff = abs(track_direction - heading)
            if direction_diff > 180:
                direction_diff = 360 - direction_diff

            return direction_diff

        # Gives back indexes that lie between start and end index of a cyclical list 
        # (start index is included, end index is not)
        def indexes_cyclical(start, end, array_len):

            if end < start:
                end += array_len

            return [index % array_len for index in range(start, end)]

        # Calculate how long car would take for entire lap, if it continued like it did until now
        def projected_time(first_index, closest_index, step_count, times_list):

            # Calculate how much time has passed since start
            current_actual_time = (step_count-1) / 15

            # Calculate which indexes were already passed
            indexes_traveled = indexes_cyclical(first_index, closest_index, len(times_list))

            # Calculate how much time should have passed if car would have followed optimals
            current_expected_time = sum([times_list[i] for i in indexes_traveled])

            # Calculate how long one entire lap takes if car follows optimals
            total_expected_time = sum(times_list)

            # Calculate how long car would take for entire lap, if it continued like it did until now
            try:
                projected_time = (current_actual_time/current_expected_time) * total_expected_time
            except:
                projected_time = 9999

            return projected_time

        #################### RACING LINE ######################

        # Optimal racing line for the Spain track
        # Each row: [x,y,speed,timeFromPreviousPoint]
        racing_track = [[-2.24336, -5.30923, 4.0, 0.03762],
[-2.38011, -5.37205, 4.0, 0.03762],
[-2.51686, -5.43488, 4.0, 0.03762],
[-2.65361, -5.49771, 4.0, 0.03762],
[-2.79036, -5.56054, 4.0, 0.03762],
[-2.92711, -5.62338, 4.0, 0.03762],
[-3.06385, -5.68621, 4.0, 0.03762],
[-3.2006, -5.74905, 4.0, 0.03762],
[-3.33735, -5.81189, 4.0, 0.03762],
[-3.47409, -5.87474, 4.0, 0.03762],
[-3.61083, -5.93759, 4.0, 0.03762],
[-3.74757, -6.00044, 4.0, 0.03762],
[-3.88431, -6.0633, 4.0, 0.03762],
[-4.02104, -6.12616, 4.0, 0.03762],
[-4.15777, -6.18903, 4.0, 0.03762],
[-4.2945, -6.25191, 4.0, 0.03762],
[-4.43123, -6.31479, 4.0, 0.03762],
[-4.56795, -6.37768, 4.0, 0.03762],
[-4.70467, -6.44058, 4.0, 0.03762],
[-4.84139, -6.50349, 4.0, 0.03762],
[-4.97809, -6.56641, 4.0, 0.03762],
[-5.1148, -6.62934, 4.0, 0.03762],
[-5.25149, -6.69228, 4.0, 0.03762],
[-5.38819, -6.75524, 4.0, 0.03762],
[-5.52487, -6.81822, 4.0, 0.03762],
[-5.66154, -6.88121, 4.0, 0.03762],
[-5.79821, -6.94423, 4.0, 0.03762],
[-5.93486, -7.00727, 2.4259, 0.06204],
[-6.0715, -7.07033, 1.8824, 0.07995],
[-6.20819, -7.13328, 1.56935, 0.09589],
[-6.34492, -7.19611, 1.39764, 0.10766],
[-6.48174, -7.2587, 1.35241, 0.11125],
[-6.61414, -7.31631, 1.35241, 0.10677],
[-6.73278, -7.35981, 1.35241, 0.09343],
[-6.84491, -7.39008, 1.35241, 0.08588],
[-6.95768, -7.40642, 1.35241, 0.08426],
[-7.07548, -7.40545, 1.35241, 0.08711],
[-7.19801, -7.38338, 1.365, 0.09121],
[-7.32109, -7.33786, 1.41066, 0.09303],
[-7.4393, -7.26906, 1.49326, 0.0916],
[-7.5484, -7.17957, 1.63047, 0.08654],
[-7.64645, -7.07351, 1.84892, 0.07812],
[-7.73381, -6.9554, 2.18716, 0.06717],
[-7.81244, -6.82933, 2.6568, 0.05593],
[-7.88465, -6.69827, 3.37017, 0.0444],
[-7.95264, -6.56432, 4.0, 0.03755],
[-8.01861, -6.42907, 4.0, 0.03762],
[-8.08459, -6.29381, 4.0, 0.03762],
[-8.15066, -6.1586, 4.0, 0.03762],
[-8.21684, -6.02344, 4.0, 0.03762],
[-8.28309, -5.88831, 4.0, 0.03762],
[-8.34942, -5.75323, 4.0, 0.03762],
[-8.41583, -5.61818, 4.0, 0.03762],
[-8.4823, -5.48316, 4.0, 0.03762],
[-8.54884, -5.34817, 4.0, 0.03762],
[-8.61543, -5.21321, 3.99024, 0.03772],
[-8.68207, -5.07828, 2.70837, 0.05557],
[-8.74876, -4.94337, 2.21781, 0.06786],
[-8.8155, -4.80848, 1.89894, 0.07925],
[-8.88222, -4.67359, 1.67543, 0.08982],
[-8.94908, -4.53877, 1.56412, 0.09622],
[-9.01252, -4.40267, 1.55538, 0.09654],
[-9.06844, -4.26421, 1.55538, 0.09601],
[-9.11307, -4.12311, 1.55538, 0.09515],
[-9.14238, -3.97984, 1.55538, 0.09402],
[-9.15233, -3.83572, 1.55538, 0.09288],
[-9.1406, -3.69286, 1.55538, 0.09216],
[-9.10737, -3.55338, 1.64909, 0.08695],
[-9.05515, -3.41862, 1.85842, 0.07777],
[-8.98794, -3.28877, 2.16272, 0.0676],
[-8.90963, -3.16336, 2.57199, 0.05749],
[-8.82347, -3.04157, 3.17885, 0.04693],
[-8.7322, -2.92243, 4.0, 0.03752],
[-8.63824, -2.80491, 4.0, 0.03762],
[-8.54367, -2.68784, 4.0, 0.03762],
[-8.44884, -2.57099, 4.0, 0.03762],
[-8.35387, -2.45424, 3.03807, 0.04954],
[-8.25888, -2.33752, 2.47347, 0.06084],
[-8.16398, -2.22072, 2.16224, 0.0696],
[-8.0692, -2.10382, 1.92872, 0.07803],
[-7.97463, -1.98677, 1.83503, 0.082],
[-7.88291, -1.86796, 1.82111, 0.08242],
[-7.79665, -1.74607, 1.82111, 0.082],
[-7.71871, -1.61995, 1.82111, 0.08141],
[-7.65174, -1.48893, 1.82111, 0.0808],
[-7.59866, -1.35264, 1.82111, 0.08031],
[-7.56113, -1.21167, 1.82111, 0.08011],
[-7.53968, -1.06719, 1.86449, 0.07834],
[-7.53391, -0.92063, 1.9592, 0.07486],
[-7.54258, -0.77339, 2.10156, 0.07018],
[-7.56397, -0.62663, 2.28609, 0.06487],
[-7.59613, -0.48116, 2.50737, 0.05942],
[-7.63722, -0.33743, 2.76187, 0.05413],
[-7.6856, -0.19561, 3.0482, 0.04916],
[-7.73988, -0.05571, 3.36563, 0.04459],
[-7.79894, 0.08241, 3.71523, 0.04043],
[-7.86186, 0.21891, 4.0, 0.03758],
[-7.92792, 0.35399, 4.0, 0.03759],
[-7.99648, 0.48787, 4.0, 0.0376],
[-8.06693, 0.62079, 3.15812, 0.04764],
[-8.13885, 0.75296, 2.64707, 0.05684],
[-8.21184, 0.88455, 2.31342, 0.06505],
[-8.28564, 1.0157, 2.09205, 0.07193],
[-8.35821, 1.14743, 1.95214, 0.07704],
[-8.42763, 1.28064, 1.86471, 0.08056],
[-8.49171, 1.41614, 1.81373, 0.08264],
[-8.54811, 1.55451, 1.79262, 0.08335],
[-8.59432, 1.69602, 1.79262, 0.08304],
[-8.62792, 1.84045, 1.79262, 0.08273],
[-8.64693, 1.98701, 1.79262, 0.08244],
[-8.64991, 2.13437, 1.79262, 0.08222],
[-8.63601, 2.28085, 1.79262, 0.08208],
[-8.60506, 2.42462, 1.79783, 0.0818],
[-8.55756, 2.56389, 1.82438, 0.08066],
[-8.49451, 2.69708, 1.86455, 0.07903],
[-8.41724, 2.82285, 1.91464, 0.0771],
[-8.32724, 2.94021, 1.98853, 0.07437],
[-8.22617, 3.04865, 2.12184, 0.06986],
[-8.11597, 3.14847, 2.37684, 0.06256],
[-7.99888, 3.24094, 2.76297, 0.054],
[-7.8769, 3.3277, 3.29567, 0.04542],
[-7.75159, 3.41032, 4.0, 0.03752],
[-7.62406, 3.49014, 3.94866, 0.0381],
[-7.49546, 3.56829, 3.73078, 0.04034],
[-7.36578, 3.64454, 3.59092, 0.04189],
[-7.23491, 3.71868, 3.46085, 0.04346],
[-7.10269, 3.79036, 3.32072, 0.04529],
[-6.96892, 3.85913, 3.17667, 0.04735],
[-6.83349, 3.92456, 3.04301, 0.04943],
[-6.69631, 3.98622, 2.92872, 0.05135],
[-6.55737, 4.04374, 2.83956, 0.05296],
[-6.41667, 4.09675, 2.78045, 0.05407],
[-6.27425, 4.1448, 2.75409, 0.05458],
[-6.13017, 4.18736, 2.75409, 0.05455],
[-5.98451, 4.22388, 2.75409, 0.05453],
[-5.83741, 4.25382, 2.75409, 0.05451],
[-5.68909, 4.2767, 2.75409, 0.05449],
[-5.53986, 4.29218, 2.75409, 0.05448],
[-5.39005, 4.30007, 2.76158, 0.05432],
[-5.24001, 4.3004, 2.80444, 0.0535],
[-5.09011, 4.2934, 2.88962, 0.05193],
[-4.94064, 4.2795, 3.02368, 0.04965],
[-4.79182, 4.25931, 3.21548, 0.04671],
[-4.64378, 4.23358, 3.48318, 0.04314],
[-4.49657, 4.20315, 3.84903, 0.03906],
[-4.35014, 4.16889, 4.0, 0.0376],
[-4.2044, 4.13165, 4.0, 0.03761],
[-4.05922, 4.09214, 4.0, 0.03761],
[-3.91447, 4.05105, 4.0, 0.03762],
[-3.77003, 4.0088, 4.0, 0.03762],
[-3.6258, 3.96583, 4.0, 0.03762],
[-3.48146, 3.92322, 4.0, 0.03762],
[-3.33697, 3.88116, 4.0, 0.03762],
[-3.19226, 3.83987, 4.0, 0.03762],
[-3.04727, 3.79957, 4.0, 0.03762],
[-2.90196, 3.76047, 4.0, 0.03762],
[-2.75628, 3.72277, 4.0, 0.03762],
[-2.6102, 3.68662, 4.0, 0.03762],
[-2.46372, 3.65217, 4.0, 0.03762],
[-2.31682, 3.61954, 4.0, 0.03762],
[-2.16949, 3.58888, 4.0, 0.03762],
[-2.02176, 3.5603, 4.0, 0.03762],
[-1.87365, 3.53387, 4.0, 0.03761],
[-1.72518, 3.50953, 4.0, 0.03761],
[-1.57642, 3.48708, 4.0, 0.03761],
[-1.42741, 3.4662, 4.0, 0.03762],
[-1.27821, 3.44654, 4.0, 0.03762],
[-1.12888, 3.42775, 4.0, 0.03763],
[-0.97947, 3.40958, 4.0, 0.03763],
[-0.83013, 3.39099, 4.0, 0.03762],
[-0.68084, 3.37196, 4.0, 0.03762],
[-0.53163, 3.35244, 4.0, 0.03762],
[-0.38245, 3.33261, 4.0, 0.03762],
[-0.2333, 3.31255, 4.0, 0.03762],
[-0.08418, 3.29234, 3.97895, 0.03782],
[0.06497, 3.2724, 2.98119, 0.05048],
[0.21417, 3.25273, 2.46531, 0.06104],
[0.3634, 3.23336, 2.18017, 0.06902],
[0.51268, 3.21433, 2.01844, 0.07456],
[0.66173, 3.19464, 1.9551, 0.0769],
[0.81004, 3.17136, 1.9551, 0.07678],
[0.95678, 3.14177, 1.9551, 0.07657],
[1.10081, 3.10316, 1.9551, 0.07627],
[1.24072, 3.05332, 1.9551, 0.07596],
[1.37497, 2.99085, 1.9551, 0.07574],
[1.50224, 2.91546, 1.96893, 0.07513],
[1.62166, 2.8279, 2.04763, 0.07232],
[1.73295, 2.72964, 2.19982, 0.06749],
[1.83653, 2.62254, 2.44107, 0.06103],
[1.93335, 2.50864, 2.76717, 0.05403],
[2.0246, 2.38969, 3.14701, 0.04764],
[2.11133, 2.26705, 3.60676, 0.04165],
[2.19449, 2.14176, 4.0, 0.0376],
[2.27492, 2.01461, 4.0, 0.03761],
[2.35311, 1.88605, 4.0, 0.03762],
[2.42956, 1.75645, 4.0, 0.03762],
[2.50467, 1.62606, 3.32019, 0.04532],
[2.57875, 1.49508, 2.87505, 0.05234],
[2.65203, 1.36365, 2.51874, 0.05975],
[2.72468, 1.23185, 2.27226, 0.06623],
[2.79817, 1.10057, 2.11943, 0.07099],
[2.87416, 0.97084, 2.07621, 0.07242],
[2.95452, 0.84403, 2.07621, 0.07231],
[3.04049, 0.72137, 2.07621, 0.07215],
[3.13347, 0.60444, 2.07621, 0.07195],
[3.23457, 0.49501, 2.07621, 0.07176],
[3.3444, 0.39471, 2.07621, 0.07164],
[3.46268, 0.30451, 2.15544, 0.06901],
[3.58816, 0.22418, 2.19334, 0.06793],
[3.71936, 0.15279, 1.90428, 0.07844],
[3.8553, 0.08985, 1.70833, 0.08768],
[3.99503, 0.03486, 1.56646, 0.09586],
[4.13793, -0.01215, 1.42658, 0.10545],
[4.28345, -0.05066, 1.32412, 0.11368],
[4.43111, -0.07731, 1.3, 0.11542],
[4.57915, -0.08815, 1.3, 0.11419],
[4.72498, -0.07992, 1.3, 0.11236],
[4.86523, -0.05038, 1.3, 0.11025],
[4.99558, 0.00269, 1.3, 0.10826],
[5.11106, 0.08028, 1.3, 0.10702],
[5.2077, 0.18036, 1.34415, 0.1035],
[5.2835, 0.29885, 1.45723, 0.09653],
[5.33891, 0.43077, 1.65302, 0.08656],
[5.37664, 0.57133, 1.87869, 0.07747],
[5.39954, 0.71712, 2.10306, 0.07017],
[5.40994, 0.86585, 2.35753, 0.06324],
[5.41037, 1.01586, 2.16948, 0.06914],
[5.40313, 1.16611, 2.00753, 0.07493],
[5.4017, 1.31651, 1.87096, 0.08039],
[5.40733, 1.46664, 1.74058, 0.08632],
[5.4217, 1.61597, 1.64403, 0.09125],
[5.44629, 1.76363, 1.55142, 0.09648],
[5.48268, 1.90829, 1.51747, 0.0983],
[5.53234, 2.04819, 1.51747, 0.09783],
[5.59643, 2.18105, 1.51747, 0.09721],
[5.67591, 2.304, 1.51747, 0.09648],
[5.77088, 2.41399, 1.51747, 0.09576],
[5.88102, 2.50752, 1.51747, 0.09522],
[6.00448, 2.58207, 1.5381, 0.09377],
[6.13843, 2.63661, 1.62181, 0.08918],
[6.27972, 2.67195, 1.79101, 0.08132],
[6.42549, 2.69074, 2.09597, 0.07013],
[6.57362, 2.69697, 2.45155, 0.06048],
[6.7229, 2.69377, 3.0475, 0.04899],
[6.87262, 2.68436, 4.0, 0.0375],
[7.02249, 2.67161, 4.0, 0.0376],
[7.17235, 2.65792, 4.0, 0.03762],
[7.3222, 2.64409, 4.0, 0.03762],
[7.47205, 2.63017, 4.0, 0.03762],
[7.62188, 2.6161, 4.0, 0.03762],
[7.7717, 2.6019, 4.0, 0.03762],
[7.92151, 2.58758, 4.0, 0.03762],
[8.07131, 2.57313, 4.0, 0.03762],
[8.22111, 2.5587, 4.0, 0.03762],
[8.37092, 2.54439, 4.0, 0.03762],
[8.52075, 2.53023, 4.0, 0.03762],
[8.67059, 2.51621, 4.0, 0.03762],
[8.82043, 2.50228, 2.92009, 0.05154],
[8.97029, 2.48848, 2.28937, 0.06574],
[9.12016, 2.47482, 1.91666, 0.07852],
[9.27005, 2.46131, 1.67347, 0.08993],
[9.41995, 2.44808, 1.5704, 0.09583],
[9.56934, 2.43297, 1.5704, 0.09561],
[9.71691, 2.4113, 1.5704, 0.09498],
[9.86111, 2.3793, 1.5704, 0.09405],
[9.99967, 2.33325, 1.5704, 0.09298],
[10.12962, 2.26985, 1.5704, 0.09207],
[10.24819, 2.18802, 1.57698, 0.09136],
[10.35373, 2.08912, 1.68461, 0.08586],
[10.44626, 1.97622, 1.90064, 0.0768],
[10.52739, 1.85303, 2.24599, 0.06567],
[10.59965, 1.72297, 2.78836, 0.05336],
[10.66582, 1.58871, 3.60394, 0.04153],
[10.72822, 1.45206, 4.0, 0.03756],
[10.7893, 1.31452, 4.0, 0.03762],
[10.8505, 1.17703, 3.46324, 0.04345],
[10.9118, 1.03959, 2.45605, 0.06127],
[10.97323, 0.9022, 2.04196, 0.0737],
[11.03478, 0.76487, 1.80615, 0.08332],
[11.09643, 0.62759, 1.63523, 0.09203],
[11.15752, 0.49016, 1.59976, 0.09401],
[11.21392, 0.35145, 1.59976, 0.0936],
[11.261, 0.21077, 1.59976, 0.09274],
[11.29471, 0.06823, 1.59976, 0.09155],
[11.31171, -0.0753, 1.59976, 0.09035],
[11.30883, -0.21841, 1.59976, 0.08947],
[11.28559, -0.35938, 1.66519, 0.0858],
[11.24366, -0.4969, 1.82938, 0.07859],
[11.18615, -0.63042, 2.10968, 0.06891],
[11.1168, -0.76014, 2.5169, 0.05845],
[11.03904, -0.88674, 3.12334, 0.04757],
[10.9558, -1.01108, 4.0, 0.03741],
[10.86956, -1.1341, 4.0, 0.03756],
[10.78223, -1.25667, 4.0, 0.03762],
[10.6949, -1.37923, 4.0, 0.03762],
[10.60755, -1.50178, 4.0, 0.03762],
[10.52023, -1.62435, 4.0, 0.03762],
[10.43292, -1.74692, 4.0, 0.03762],
[10.34562, -1.86951, 4.0, 0.03762],
[10.25832, -1.99209, 4.0, 0.03762],
[10.17102, -2.11468, 4.0, 0.03762],
[10.08372, -2.23726, 4.0, 0.03762],
[9.99642, -2.35985, 4.0, 0.03762],
[9.90912, -2.48244, 4.0, 0.03762],
[9.82183, -2.60502, 4.0, 0.03762],
[9.73453, -2.7276, 4.0, 0.03762],
[9.64721, -2.85018, 4.0, 0.03762],
[9.5599, -2.97275, 4.0, 0.03762],
[9.47257, -3.09532, 4.0, 0.03762],
[9.38523, -3.21788, 4.0, 0.03762],
[9.2979, -3.34044, 4.0, 0.03762],
[9.21056, -3.46299, 3.44322, 0.04371],
[9.12316, -3.58551, 2.90265, 0.05185],
[9.03574, -3.708, 2.54663, 0.05909],
[8.94843, -3.83058, 2.31335, 0.06505],
[8.86022, -3.95241, 2.19782, 0.06843],
[8.76975, -4.07232, 2.17322, 0.06912],
[8.67563, -4.189, 2.17322, 0.06898],
[8.57656, -4.30098, 2.17322, 0.0688],
[8.47133, -4.40663, 2.17322, 0.06861],
[8.35911, -4.5043, 2.17322, 0.06846],
[8.23968, -4.5927, 2.17322, 0.06837],
[8.1135, -4.6712, 2.23514, 0.06649],
[7.9815, -4.73997, 2.40079, 0.06199],
[7.8449, -4.79999, 2.70577, 0.05514],
[7.70496, -4.85293, 3.1263, 0.04786],
[7.56272, -4.90045, 3.67189, 0.04084],
[7.41891, -4.94396, 4.0, 0.03756],
[7.27412, -4.98471, 4.0, 0.0376],
[7.12875, -5.0236, 4.0, 0.03762],
[6.98311, -5.06154, 4.0, 0.03762],
[6.83725, -5.09858, 4.0, 0.03762],
[6.69118, -5.13476, 4.0, 0.03762],
[6.5449, -5.17009, 4.0, 0.03762],
[6.39842, -5.20456, 4.0, 0.03762],
[6.25172, -5.2381, 4.0, 0.03762],
[6.1048, -5.27066, 4.0, 0.03762],
[5.95766, -5.3022, 4.0, 0.03762],
[5.81029, -5.33265, 4.0, 0.03762],
[5.6627, -5.36201, 4.0, 0.03762],
[5.51491, -5.3903, 3.27402, 0.04596],
[5.36692, -5.41758, 2.68651, 0.05601],
[5.21873, -5.44378, 2.35165, 0.06399],
[5.07034, -5.4688, 2.07876, 0.07239],
[4.92171, -5.49248, 1.88, 0.08005],
[4.77279, -5.5136, 1.79297, 0.08389],
[4.62345, -5.52934, 1.78451, 0.08415],
[4.47404, -5.53708, 1.78451, 0.08384],
[4.32529, -5.53449, 1.78451, 0.08337],
[4.17826, -5.51894, 1.78451, 0.08285],
[4.03446, -5.48794, 1.78451, 0.08243],
[3.89556, -5.44042, 1.78451, 0.08226],
[3.7631, -5.37679, 1.83397, 0.08013],
[3.63821, -5.29848, 1.93268, 0.07628],
[3.52139, -5.20754, 2.08245, 0.07109],
[3.4125, -5.10628, 2.29151, 0.06489],
[3.31086, -4.99694, 2.57545, 0.05796],
[3.21542, -4.88157, 2.98382, 0.05018],
[3.12485, -4.76193, 2.86927, 0.0523],
[3.03801, -4.63929, 2.37375, 0.06331],
[2.95373, -4.51473, 2.04564, 0.07352],
[2.8709, -4.38912, 1.80695, 0.08327],
[2.78847, -4.26321, 1.63029, 0.0923],
[2.70278, -4.13963, 1.51485, 0.09927],
[2.61159, -4.02045, 1.47339, 0.10185],
[2.51299, -3.90829, 1.47339, 0.10135],
[2.40545, -3.80639, 1.47339, 0.10055],
[2.28813, -3.71853, 1.47339, 0.09948],
[2.16113, -3.6488, 1.47339, 0.09833],
[2.02578, -3.60078, 1.47339, 0.09748],
[1.88456, -3.57635, 1.50431, 0.09527],
[1.74047, -3.57514, 1.60889, 0.08956],
[1.59619, -3.59476, 1.79885, 0.08095],
[1.45347, -3.63138, 2.09597, 0.0703],
[1.3131, -3.68066, 2.61795, 0.05683],
[1.17485, -3.73804, 3.46133, 0.04324],
[1.03806, -3.80003, 4.0, 0.03755],
[0.90154, -3.86335, 4.0, 0.03762],
[0.76493, -3.92649, 4.0, 0.03762],
[0.62826, -3.9895, 4.0, 0.03762],
[0.49153, -4.05237, 4.0, 0.03762],
[0.35475, -4.11514, 4.0, 0.03762],
[0.21798, -4.17792, 4.0, 0.03762],
[0.08124, -4.24077, 4.0, 0.03762],
[-0.05545, -4.30373, 4.0, 0.03762],
[-0.19214, -4.36669, 4.0, 0.03762],
[-0.32885, -4.42961, 4.0, 0.03762],
[-0.46558, -4.49248, 4.0, 0.03762],
[-0.60233, -4.55531, 4.0, 0.03762],
[-0.73909, -4.61813, 4.0, 0.03762],
[-0.87584, -4.68095, 4.0, 0.03762],
[-1.0126, -4.74377, 4.0, 0.03762],
[-1.14935, -4.80659, 4.0, 0.03762],
[-1.2861, -4.86942, 4.0, 0.03762],
[-1.42285, -4.93226, 4.0, 0.03762],
[-1.5596, -4.99509, 4.0, 0.03762],
[-1.69635, -5.05792, 4.0, 0.03762],
[-1.8331, -5.12075, 4.0, 0.03762],
[-1.96985, -5.18357, 4.0, 0.03762],
[-2.1066, -5.2464, 4.0, 0.03762]]
        ################## INPUT PARAMETERS ###################

        # Read all input parameters
        all_wheels_on_track = params['all_wheels_on_track']
        x = params['x']
        y = params['y']
        distance_from_center = params['distance_from_center']
        is_left_of_center = params['is_left_of_center']
        heading = params['heading']
        progress = params['progress']
        steps = params['steps']
        speed = params['speed']
        steering_angle = params['steering_angle']
        track_width = params['track_width']
        waypoints = params['waypoints']
        closest_waypoints = params['closest_waypoints']
        is_offtrack = params['is_offtrack']

        ############### OPTIMAL X,Y,SPEED,TIME ################

        # Get closest indexes for racing line (and distances to all points on racing line)
        closest_index, second_closest_index = closest_2_racing_points_index(
            racing_track, [x, y])

        # Get optimal [x, y, speed, time] for closest and second closest index
        optimals = racing_track[closest_index]
        optimals_second = racing_track[second_closest_index]

        # Save first racingpoint of episode for later
        if self.verbose == True:
            self.first_racingpoint_index = 0 # this is just for testing purposes
        if steps == 1:
            self.first_racingpoint_index = closest_index

        ################ REWARD AND PUNISHMENT ################

        ## Define the default reward ##
        reward = 1

        ## Reward if car goes close to optimal racing line ##
        DISTANCE_MULTIPLE = 1
        dist = dist_to_racing_line(optimals[0:2], optimals_second[0:2], [x, y])
        distance_reward = max(1e-3, 1 - (dist/(track_width*0.5)))
        reward += distance_reward * DISTANCE_MULTIPLE

        ## Reward if speed is close to optimal speed ##
        SPEED_DIFF_NO_REWARD = 1
        SPEED_MULTIPLE = 2
        speed_diff = abs(optimals[2]-speed)
        if speed_diff <= SPEED_DIFF_NO_REWARD:
            # we use quadratic punishment (not linear) bc we're not as confident with the optimal speed
            # so, we do not punish small deviations from optimal speed
            speed_reward = (1 - (speed_diff/(SPEED_DIFF_NO_REWARD))**2)**2
        else:
            speed_reward = 0
        reward += speed_reward * SPEED_MULTIPLE

        # Reward if less steps
        REWARD_PER_STEP_FOR_FASTEST_TIME = 1 
        STANDARD_TIME = 37
        FASTEST_TIME = 27
        times_list = [row[3] for row in racing_track]
        projected_time = projected_time(self.first_racingpoint_index, closest_index, steps, times_list)
        try:
            steps_prediction = projected_time * 15 + 1
            reward_prediction = max(1e-3, (-REWARD_PER_STEP_FOR_FASTEST_TIME*(FASTEST_TIME) /
                                           (STANDARD_TIME-FASTEST_TIME))*(steps_prediction-(STANDARD_TIME*15+1)))
            steps_reward = min(REWARD_PER_STEP_FOR_FASTEST_TIME, reward_prediction / steps_prediction)
        except:
            steps_reward = 0
        reward += steps_reward

        # Zero reward if obviously wrong direction (e.g. spin)
        direction_diff = racing_direction_diff(
            optimals[0:2], optimals_second[0:2], [x, y], heading)
        if direction_diff > 30:
            reward = 1e-3
            
        # Zero reward of obviously too slow
        speed_diff_zero = optimals[2]-speed
        if speed_diff_zero > 0.5:
            reward = 1e-3
            
        ## Incentive for finishing the lap in less steps ##
        REWARD_FOR_FASTEST_TIME = 1500 # should be adapted to track length and other rewards
        STANDARD_TIME = 37  # seconds (time that is easily done by model)
        FASTEST_TIME = 27  # seconds (best time of 1st place on the track)
        if progress == 100:
            finish_reward = max(1e-3, (-REWARD_FOR_FASTEST_TIME /
                      (15*(STANDARD_TIME-FASTEST_TIME)))*(steps-STANDARD_TIME*15))
        else:
            finish_reward = 0
        reward += finish_reward
        
        ## Zero reward if off track ##
        if all_wheels_on_track == False:
            reward = 1e-3

        ####################### VERBOSE #######################
        
        if self.verbose == True:
            print("Closest index: %i" % closest_index)
            print("Distance to racing line: %f" % dist)
            print("=== Distance reward (w/out multiple): %f ===" % (distance_reward))
            print("Optimal speed: %f" % optimals[2])
            print("Speed difference: %f" % speed_diff)
            print("=== Speed reward (w/out multiple): %f ===" % speed_reward)
            print("Direction difference: %f" % direction_diff)
            print("Predicted time: %f" % projected_time)
            print("=== Steps reward: %f ===" % steps_reward)
            print("=== Finish reward: %f ===" % finish_reward)
            
        #################### RETURN REWARD ####################
        
        # Always return a float value
        return float(reward)


reward_object = Reward() # add parameter verbose=True to get noisy output for testing


def reward_function(params):
    return reward_object.reward_function(params)
